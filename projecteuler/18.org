#+TITLE: Problem 18
#+DATE: [2019-05-21 Tue 14:33]
#+DESCRIPTION: 从数字塔顶端到底端的最大路径和
#+FILETAGS: #dp#

* Problem

*[[https://projecteuler.net/problem=18][Maximum path sum I]]*

By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

#+BEGIN_SRC text
  (3)
 (7)4
 2(4)6
8 5(9)3
#+END_SRC

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

#+BEGIN_SRC text
              75
             95 64
            17 47 82
           18 35 87 10
          20 04 82 47 65
         19 01 23 75 03 34
        88 02 77 73 07 63 67
       99 65 04 28 06 16 70 92
      41 41 26 56 83 40 80 70 33
     41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
   70 11 33 28 77 73 17 78 39 68 17 57
  91 71 52 38 17 14 91 43 58 50 27 29 48
 63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
#+END_SRC

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, [[https://projecteuler.net/problem=67][Problem 67]], is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)

*最大路径和 I*

从如下数字三角形的顶端出发，不断移动到下一行与其相邻的数直至到达底部，所能得到的最大路径和是 23。

如上图，最大路径和为 3 + 7 + 4 + 9 = 23。

从如下数字三角形的顶端出发到达底部，求所能得到的最大路径和。

注意： 在这个问题中，由于只有 16384 条路径，通过穷举所有的路径来解决问题是可行的。然而，对于第 67 题，虽然是一道相同类型的题目，但是其中的数字三角形将拥有一百行，就不再能够通过暴力枚举的方法来解决，而需要一个更加聪明的办法！;o)

* Solution

经典的动态规划问题，不过这里我们首先还是给出穷举解法：

#+BEGIN_SRC elisp
(defvar eu18-data
  [[75]
   [95 64]
   [17 47 82]
   [18 35 87 10]
   [20 04 82 47 65]
   [19 01 23 75 03 34]
   [88 02 77 73 07 63 67]
   [99 65 04 28 06 16 70 92]
   [41 41 26 56 83 40 80 70 33]
   [41 48 72 33 47 32 37 16 94 29]
   [53 71 44 65 25 43 91 52 97 51 14]
   [70 11 33 28 77 73 17 78 39 68 17 57]
   [91 71 52 38 17 14 91 43 58 50 27 29 48]
   [63 66 04 68 89 53 67 30 73 16 69 87 40 31]
   [04 62 98 27 23 09 70 98 73 93 38 53 60 04 23]])

(defun eu18-find (i j)
  (if (= i 0) (aref (aref eu18-data 0) 0)
    (cond
     ((= j 0) (+ (aref (aref eu18-data i) j)
		 (eu18-find (1- i) 0)))
     ((= j i) (+ (aref (aref eu18-data i) j)
		 (eu18-find (1- i) (1- j))))
     (t
      (+ (aref (aref eu18-data i) j)
	 (max (eu18-find (1- i) (1- j))
	      (eu18-find (1- i) j)))))))

(apply 'max (cl-loop for i from 0 below 15
		     collect (eu18-find 14 i)))
;; 1074
#+END_SRC

由于我比较懒，这里就直接在递归法的基础上做修改了，我就不写迭代法了：

#+BEGIN_SRC elisp
(setq eu18-h (make-hash-table :test 'equal))

(defun eu18-find2 (i j)
  (if-let ((v (gethash (cons i j) eu18-h)))
      v
    (cond
     ((= i 0) (puthash '(0 0) (aref (aref eu18-data 0) 0) eu18-h))
     ((= j 0) (puthash `(,i ,j) (+ (aref (aref eu18-data i) j)
				   (eu18-find2 (1- i) 0))
		       eu18-h))
     ((= j i) (puthash `(,i ,j) (+ (aref (aref eu18-data i) j)
				   (eu18-find2 (1- i) (1- j)))
		       eu18-h))
     (t
      (puthash `(,i ,j) (+ (aref (aref eu18-data i) j)
			   (max (eu18-find2 (1- i) (1- j))
				(eu18-find2 (1- i) j)))
	       eu18-h)))))
#+END_SRC

老实说提升并不大，毕竟规模还没有上来。
