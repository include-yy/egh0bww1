#+SETUPFILE: ../../setup.org
#+TITLE: emacs 的 cl-defstruct
#+TITLE: @@html:<div class="yyheadimg"><img src="./aHR0cHM6Ly93d3cucGl4aXYubmV0L2FydHdvcmtzLzQ1ODc1OTcy.jpg" alt="load failed"></div>@@
#+DATE: [2021-10-09 Sat 17:04]
#+TAGS: emacs

本文的主要目的是介绍 =cl-defstruct= ，顺便介绍一下作为内部表示的 record。本来想着介绍一下 elisp 的面向对象系统 —— eieio，但是我在面向对象编程方面的经验少的可怜，这部分留到之后的文章中吧。

本文中的代码在 emacs on windows 27.1 下可以正常运行。参考的文档版本是 emacs 27.2

* 使用结构的好处

1




* 什么是 record

record 可以用来创建 emacs 中没有的类型的对象。它被用作 =cl-defstruct= 和 eieio 中 =defclass= 对象的内部表示。

record 和 vector 非常像（但并不是 vector），可以使用 aref 来访问它的 slot（段），使用 =copy-sequence= 来获取浅拷贝。它的第一个 slot 存储了类型，可以使用 =type-of= 获取。根据文档，在当前实现中（emacs 27.2），一个 record 最多可以有 4096 个 slot。

record 的类型必须是一个 symbol 或类型描述符（type descriptor）。类型描述符也是一个 record，它包含了类型的相关信息。它的位于 1 序号位置的 slot 必须是表明类型的 symbol，函数 =type-of= 根据这个 slot 来获取 record 的类型。类型描述符的其他 slot 用于扩展。

以下代码可以说明类型描述符的使用：

#+BEGIN_SRC emacs-lisp
(type-of #s(a 1 2)) => a
(type-of #s(#s(www h e) a b)) => h
#+END_SRC

record 的打印表示是 =#s= 加上各 slot 的打印表示。record 是自求值的（self-evaluating form），对某个 record 求值会得到与之相同的 record。

为了避免和其他类型出现名字冲突，定义新类型的 Lisp 程序应该使用 package 的命名规范。

与 record 相关的函数就三个，判断对象是否为 record 的 =recordp= 和用于创建 record 的 =record= 与 =make-record= 。其中， =record= 和 =make-record= 的关系就像是 =list= 和 =make-list= 一样。

下面是一些简单的例子，用作对上面文字的简单说明：

#+BEGIN_SRC emacs-lisp
(recordp #s(a 1)) => t
(recordp [a 1]) => nil

(record 'yy-record 1 2 3) => #s(yy-record 1 2 3)
(make-record 'yy-record 5 0) => #s(yy-record 0 0 0 0 0)
#+END_SRC

** 关于 type-of 的一点补充

=type-of= 这个函数可以用来判断对象的类型，它返回对象对应类型的符号。这里给出一点例子来说明它的使用。

#+BEGIN_SRC emacs-lisp
(type-of 1) => integer
(type-of 1.0) => float
(type-of 1.0e+INF) => float
(type-of -1.0e+INF) => float
(type-of 0.0e+NaN) => float
(type-of -0.0e+NaN) => float
(type-of ?我) => integer
(type-of ?a) => integer
(type-of 'include-yy) => symbol
(type-of 'quote) => symbol
(type-of "") => string
(type-of "hello world") => string
(type-of []) => vector
(type-of [1 2 3]) => vector
(type-of (make-char-table 'abc)) => char-table
(type-of (make-bool-vector 10 0)) => bool-vector
(type-of nil) => symbol
(type-of t) => symbol
(type-of ()) => symbol
(type-of '(1 . 2)) => cons
(type-of '(1 2)) => cons
(type-of (make-hash-table)) => hash-table
(type-of (symbol-function 'cons)) => subr
(type-of (symbol-function 'cl-mapcar)) => compiled-function
(type-of (lambda(x) x)) => cons
(type-of (make-record 'yyre 10 0)) => yyre
(type-of (make-record #s(tt yy) 10 0)) => yy
#+END_SRC


* cl-defstruct 的使用方法

** *

既然这个宏的名字有 cl 前缀，那它自然是从 common lisp 中借过来的了。它提供了一种定义结构体的通用方法。在 r6rs 中有一个叫做 =define-record-type= 的宏（或者说 syntax extension）和 cl-defstruct 很像，它大概也是受到了 CL 的影响。 =define-record-type= 最早出现在 SRFI9[fn::https://srfi.schemers.org/srfi-9/]中。

=cl-defstruct= 使用 record 作为内部的数据对象表示方法。emacs 早先版本中没有 record 的时候使用的是另外的表示方法，使用旧版本 emacs 编译的代码中含有 =cl-defstruct= 的部分不会使用 record。emacs 提供了一个叫做 =cl-old-struct-compat-mode= 的函数来兼容先前版本，若编译码中含有旧的 =cl-defstruct= ，就会激活该模式来提供兼容支持。

=cl-defstruct= 的原型是：

#+BEGIN_SRC emacs-lisp
(cl-defstruct name slots ...)
#+END_SRC

其中 name 是要定义结构的名称，slots 是结构各个 slot 对应的选项。在求值后， =cl-defstruct= 默认会为你生成一些函数： =make-name= 可以用来构建新的类型为 name 的对象， =copy-name= 可以获取某个 name 对象的浅拷贝， =name-p= 可以判断某个对象是否为 name 结构， =name-{slot-name}= 可以获取某个 name 对象的某 slot 的值。使用 =(setf (name-{slot-name} obj) newval)= 可以为对象的某个 slot 赋值。

=make-name= 接受以 slots name 作为关键字的关键字参数，若调用函数时存在没有指定的 slot，那么得到的对象中该 slot 的值为 nil。各 getter 函数在获取 slot 值之前会判断对象的类型，若类型不符则引发错误。

下面的例子可以说明上述函数的使用：

#+BEGIN_SRC emacs-lisp
(cl-defstruct website domain ip)
(setq a (make-website :domain "baidu.com" :ip "220.181.38.148"))
(website-domain a) => "baidu.com"
(website-ip a) => "220.181.38.148"
(setq b (copy-website a)) => #s(website "baidu.com" "220.181.38.148")

(setq c (make-website :domain "zhihu.com")) => #s(website "zhihu.com" nil)
(setf (website-ip c) "103.41.167.234")
c => #s(website "zhihu.com" "103.41.167.234")
#+END_SRC

=cl-defstruct= 的 slot 除了是单个 slot-name 外，还可以是 =(slot-name default-value slot-options ...)= 的形式。 =default-value= 是一个表达式，每当创建实例但未指定 slot-name 的值时对该表达式求值，使用求值结果作为默认值。 =slot-options= 可以是 =:read-only= ， =:type= 和 =:documentation= 三个，其他的选项会被忽略掉。 =:raed-only= 表示该 slot 的值在对象创建时就确定，且随后不能被 setf 修改。 =:type= 用来指定 slot 的值类型，不过对于动态类型的 elisp 大概就图一乐。 =:documentation= 是描述 slot 的字符串。

使用 list 形式的 slot，我们可以改进上面的代码：

#+BEGIN_SRC emacs-lisp
(cl-defstruct website3 (domain "" :type string :documentation "domain of webiste")
                       (ip "" :type string :documentation "ip of host"))
#+END_SRC


** 结构的可用选项

除了说 slot 具有选项外，整个结构也有一些关键字可用。它与 slot 的选项类似，以单个符号或包括选项的表出现。

以下选项是可用的：

- =:conc-name= ，用来指定 getter 函数的前缀名。默认前缀名是结构名加上 =-= 。
  - 如果指定 nil，getter 函数名就是各 slot 的名字

#+BEGIN_SRC emacs-lisp
(cl-defstruct (yyyy (:conc-name y4-)) a b c)
(y4-a (make-yyyy :a 1)) => 1

(cl-defstruct (yyyyy (:conc-name nil)) yy-a b c)
(yy-a (make-yyyyy :yy-a 1)) => 1
#+END_SRC

- =:constructor= 用来指定构造函数的名字，它可以多次使用来指定不同的构造函数。它有两种用法：
  - 简单的就是 =(:constructor new-name)= ，可以使用 =new-name= 而不是 =make-{structname}= 来作为构造函数名。如果指定 nil，那就不生成默认的构造函数。如果有多个简单形式的 =:constructor= ，则取最后一个来作为构造函数名
  - 更复杂的用法则是指定构造名和相应的参数表。参数表是 CL 风格的，即可用 &optional，&rest，&key 和 &aux。参数表中与 slot 名字对应的参数会将它的值赋给对应的 slot。若某 slot 名字没有出现在参数表中，它在对象中的值就是 slot 指定的默认值或 nil。若对应于某 slot 的 &optional 或 &key 参数被忽略了，slot 的值就是 &optional 或 &key 的默认值或 slot 的默认值

以下例子可以说明上面的用法：

#+BEGIN_SRC emacs-lisp
(cl-defstruct (y6 (:constructor y6-make)) a b c)
(y6-a (y6-make :a 1)) => 1
(y6-a (make-y6 :a 1)) => Debugger entered--Lisp error: (void-function make-y6)

(cl-defstruct (ytwo (:constructor ytwo-make)
                    (:constructor ytwo-ekam))
  a b)
(ytwo-ekam :a 1) => #s(ytwo 1 nil)
(ytwo-make :a 1) => Debugger entered--Lisp error: (void-function ytwo-make)

(cl-defstruct (y7 (:constructor nil)
                  (:constructor y7-c1 (a b c))
                  (:constructor y7-c2 (&key a b c))
                  (:constructor y7-c3 (x y z &aux (a x) (b y) (c z)))
                  (:constructor y7-c4 (a &optional (b (+ a 1)) (c 0)))
                  (:constructor y7-c5 (b a &rest c0 &aux (c (car c0)))))
  a b c)

(make-y7) => Debugger entered--Lisp error: (void-function make-y7)
(y7-c1 1 2 3) => #s(y7 1 2 3)
(y7-c2 :a 1 :b 2 :c 3) => #s(y7 1 2 3)
(y7-c3 1 2 3) => #s(y7 1 2 3)
(y7-c4 1) => #s(y7 1 2 0)
(y7-c4 1 0) => #s(y7 1 0 0)
(y7-c4 1 3 3) => #s(y7 1 3 3)
(y7-c5 1 2) => #s(y7 2 1 nil)
(y7-c5 1 2 3 4) => #s(y7 2 1 3)

(cl-defstruct (y8 (:constructor y8-c (a &optional b)))
  a (b 123 "hhh"))

(y8-c 1) => #s(y8 1 123)
(y8-c 1 2) => #s(y8 1 2)
#+END_SRC

- =:copier= ，为浅拷贝函数提供一个名字。默认情况下是 =copy-{name}=
  - 若指定 nil 则不生成默认拷贝函数（拷贝函数使用 copy-sequence 实现）

- =:predicate= ，为该结构的判断谓词提供一个名字，默认情况下是 ={name}-p=
  - 若指定 nil 则不会生成谓词函数
  - 如果使用了 =:type= 且没有指定 =:named= 选项的话也会没有谓词函数
  - =cl-typep= 接受一个值和类型来判断值是否为该类型。它会使用 =typename-p= 来判断是否为该类型。若使用 =:predicate= 指定了其他的谓词名字， =cl-typep= 就用不了了。

#+BEGIN_SRC emacs-lisp
;; example of common use
(cl-typep 'a 'atom) => t
(and (cl-typep nil 'atom) (cl-typep nil 'list)) => t
(cl-typep 'a 'symbol) => t
(cl-typep 1 'integer) => t
(cl-typep 1.0 'float) => t
(cl-typep 1 'number) => t
(cl-typep ?a 'character) => t
(cl-typep "abc" 'string) => t
(cl-typep [1 2] 'vector) => t
(cl-typep [] 'array) => t
(cl-typep '(1) 'list) => t
(cl-typep '(1 2) 'cons) => t
(cl-typep [1 2 3] 'sequence) => t
(cl-typep (make-hash-table) 'hash-table) => t
(cl-typep #s(1 2) 'record) => t

;;cl-typep with struct
(cl-defstruct yy-9 a)
(cl-typep (make-yy-9 :a 1) 'yy-9) => t
(cl-defstruct (yy-11 (:predicate huhu)) a)
(cl-typep (make-yy-11 :a 1) 'yy-11) => t
(cl-typep (make-yy-9 :a 1) 'yy-11) => nil
#+END_SRC

不过就例子中定义的 yy-11 来看，指定了其他名字作为谓词， =cl-typep= 也可以正常工作。可能需要了解一下 =cl-typep= 的具体实现。

- =:include= ，可以将其他结构中的 slot 包含到该结构中，类似于 C++ 中的继承操作。它接受一个结构作为父结构。父结构的 getter 函数可以用在子结构上
  - 如果 =:include= 中结构名后面还有参数，那么它会替换掉原结构中同名 slot 的选项
  - 该选项只能使用一次，这也就是说只允许“单继承”

#+BEGIN_SRC emacs-lisp
(cl-defstruct yy-father a (b 0) c)
(cl-defstruct (yy-son (:include yy-father (b 1)))
  d e)
(yy-father-a (make-yy-son :a 1 :b 2 :c 3 :d 4 :e 5)) => 1
(yy-father-b (make-yy-son)) => 1
(yy-father-b (make-yy-father)) => 0
#+END_SRC

- =:noinline= ，使用该选项指示结构的函数不会是内联（inline）的，即使一般情况下是内联的

- =:type= ，使用它可以指定结构的内部表示方式，若不使用则默认使用 record。它只能是 vector 或 list
  - 使用 record 或 vector 便于对 slot 的更快访问，但是创建速度相对比较慢。使用 list 创建更快，但是访问 slot 会花费更多时间

- =:named= ，它不接受参数，一般和 =:type= 连用，表明在对象中加入结构 tag 信息
  - 使用它会导致类型 tag 放在内部表示对象的最前面，举例来说，若指定类型为 vector，且指定了 :named，对于类型 yyy，它的向量结构就是 =[yyy slots...]=
  - 使用 =:type= 而不使用 =:named= 会导致结构中不含类型 tag，也就是说创建的结构是没有类型 tag 的纯表或纯向量。对于类型 yyy，若它有 3 个 slot 且 type 为 list，它的对象表示就是 =(a b c)= ，其中没有 tag 信息
  - 由于无名结构的内部没有 tag， =cl-defstruct= 也就没有办法为它创建一个有意义的判断谓词。各种 getter 函数也无法在获取值之前判断对象是否为该类型

#+BEGIN_SRC emacs-lisp
(cl-defstruct yy-21 a b c)
(cl-defstruct (yy-22 (:type list)) a b c)
(cl-defstruct (yy-22-n (:type list) :named) a b c)
(cl-defstruct (yy-23 (:type vector)) a b c)
(cl-defstruct (yy-23-n (:type vector) :named) a b c)

(make-yy-21 :a 1 :b 2 :c 3) => #s(yy-21 1 2 3)
(make-yy-22 :a 1 :b 2 :c 3) => (1 2 3)
(yy-22-b '(1 2)) => 2
(yy-22-p '(1 2 3)) => Debugger entered--Lisp error: (void-function yy-22-p)
(make-yy-22-n :a 1 :b 2 :c 3) => (yy-22-n 1 2 3)
(make-yy-23 :a 1 :b 2 :c 3) => [1 2 3]
(make-yy-23-n :a 1 :b 2 :c 3) => [yy-23-n 1 2 3]
#+END_SRC

- =:initial-offset= ，它必须是一个非负值，用来指定在第一个 slot （slot 0）之前留置为空 slot 的个数
  - 若 =:type= 为 vector 或 list 且没有指定 =:named= ，那么该关键字指定的是 slot 0 在序列中的位置，在它前面的元素会被 nil 填充并被忽略。若指定了 =:named= ，那么 tag 就在这个指定的位置
  - 如果 =:include= 了其他结构，那么该关键字指定的是在父结构最后一个 slot 到本结构第一个 slot 间的空 slot 数

#+BEGIN_SRC emacs-lisp
(cl-defstruct (yy-31 (:initial-offset 1)) a b)
(make-yy-31 :a 1 :b 2) => #s(yy-31 nil 1 2)
(cl-defstruct (yy-32 (:initial-offset 1) (:type vector)) a b)
(make-yy-32 :a 1 :b 2) => [nil 1 2]
(cl-defstruct (yy-33 (:initial-offset 1) (:type list) :named) a b)
(make-yy-33 :a 1 :b 2) => (nil yy-33 1 2)
(cl-defstruct (yy-34 (:initial-offset 1) (:include yy-32) (:type vector) :named) c)
(make-yy-34 :a 1 :b 2 :c 3) => [nil 1 2 nil 3]
(cl-defstruct (yy-35 (:initial-offset 1) (:include yy-31)) c)
(make-yy-35 :a 1 :b 2 :c 3) => #s(yy-35 nil 1 2 nil 3)
(cl-defstruct (yy-36 (:initial-offset 1) (:include yy-31) (:type vector) :named) c)
=> Debugger entered--Lisp error: (error ":type disagrees with :include for yy-36")
#+END_SRC


** 一些相关的函数

这是文档中列出的 4 个函数，这里简单抄了下来。

- =(cl-struct-sequence-type STRUCT-TYPE)= ，该函数返回某结构类型的内部表示方式
  - 返回值是一个 symbol，它可以是 record，vector 或 list
  - 若 STRUCT-TYPE 不是结构则返回 nil

#+BEGIN_SRC emacs-lisp
(cl-defstruct yy-c a)
(cl-struct-sequence-type 'yy-c) => nil
(cl-defstruct (yy-d (:type vector)) a)
(cl-struct-sequence-type 'yy-d) => vector
(cl-defstruct (yy-e (:type list)) a)
(cl-struct-sequence-type 'yy-e) => list
#+END_SRC

经多次实验，若定义时不指定 =:type= ，该函数的返回值总为 nil。

- =(cl-struct-slot-info STRUCT-TYPE)= ，返回结构类型对应的 slot 描述符组成的表
  - 表中元素的格式是 =(name . opts)= ，name 是 slot 的名字，opts 是在 =cl-defstruct= 中指定的选项

#+BEGIN_SRC emacs-lisp
(cl-defstruct (yy-xg (:copier yyxg-cp)) (a 0 :documentation "hhh") b (c 0 :read-only t))
(cl-struct-slot-info 'yy-xg) =>
((cl-tag-slot) (a 0 :documentation "hhh") (b nil) (c 0 :read-only t))
#+END_SRC

- =(cl-struct-slot-offset STRUCT-TYPE SLOT-NAME)= ，返回 SLOT-NAME 对应的 slot 的偏移量

#+BEGIN_SRC emacs-lisp
(cl-struct-slot-offset 'yy-xg 'a) => 1
(cl-struct-slot-offset 'yy-xg 'b) => 2
(cl-struct-slot-offset 'yy-xg 'c) => 3
#+END_SRC

- =(cl-struct-slot-value STRUCT-TYPE SLOT-NAME INST)= ，返回 SLOT-NAME 对应 slot 在 INST 对象中的值。

#+BEGIN_SRC emacs-lisp
(setq a (make-yy-xg :a 1 :b 2 :c 3))
(cl-struct-slot-value 'yy-xg 'a a) => 1
(cl-struct-slot-value 'yy-xg 'b a) => 2
(cl-struct-slot-value 'yy-xg 'c a) => 3
#+END_SRC


* 对 cl-defstruct 实现的分析

=cl-defstruct= 的定义位于 cl-macs.el 中，大约有 300 行。这么长的代码一股脑贴过来毫无意义，但是单独摘出一部分来分析又有点太难了，其中涉及到的变量有点多。这里我就将它的代码分为几个小节逐次分析。涉及到函数/宏声明的部分我略过了，我不太熟。

首先，让我们打开 cl-macs.el ，随后将光标移到定义中，然后按下 =C-x n d= （narrow-to-defun），就可以看到这个 buffer 中只有 cl-defstruct 这一个宏了，这样就可以不受干扰的开始阅读代码了（可以使用 =C-x n w= (widden) 来复原）。如果你使用的是 emacs 27.1 的话，下面每段代码开头注明的行数应该和你看到的对的上，不过就算对不上也差不了多少。

=(defmacro cl-defstruct (struct &rest descs))= 是它的函数原型，struct 是结构名， descs 是各 slot。

** 变量的初始化

#+BEGIN_SRC emacs-lisp
;; from line 43 to line 84
(let* ((name (if (consp struct) (car struct) struct))
       (opts (cdr-safe struct))
       (slots nil)
       (defaults nil)
       (conc-name (concat (symbol-name name) "-"))
       (constructor (intern (format "make-%s" name)))
       (constrs nil)
       (copier (intern (format "copy-%s" name)))
       (predicate (intern (format "%s-p" name)))
       (print-func nil) (print-auto nil)
       (safety (if (cl--compiling-file) cl--optimize-safety 3))
       (include nil)
       ;; There are 4 types of structs:
       ;; - `vector' type: means we should use a vector, which can come
       ;;   with or without a tag `name', which is usually in slot 0
       ;;   but obeys :initial-offset.
       ;; - `list' type: same as `vector' but using lists.
       ;; - `record' type: means we should use a record, which necessarily
       ;;   comes tagged in slot 0.  Currently we'll use the `name' as
       ;;   the tag, but we may want to change it so that the class object
       ;;   is used as the tag.
       ;; - nil type: this is the "pre-record default", which uses a vector
       ;;   with a tag in slot 0 which is a symbol of the form
       ;;   `cl-struct-NAME'.  We need to still support this for backward
       ;;   compatibility with old .elc files.
       (tag name)
       (tag-symbol (intern (format "cl-struct-%s-tags" name)))
       (include-descs nil)
       (include-name nil)
       (type nil)         ;nil here means not specified explicitly.
       (named nil)
       (cldefsym (if cl--struct-inline 'cl-defsubst 'cl-defun))
       (defsym (if cl--struct-inline 'cl-defsubst 'defun))
       (forms nil)
       (docstring (if (stringp (car descs)) (pop descs)))
       pred-form pred-check)
  ;; Can't use `cl-check-type' yet.
  (unless (cl--struct-name-p name)
    (signal 'wrong-type-argument (list 'cl-struct-name-p name 'name)))
  (setq descs (cons '(cl-tag-slot)
		    (mapcar (function (lambda (x) (if (consp x) x (list x))))
			    descs)))
  ...
#+END_SRC

上面的代码中包含了成吨的变量，这里我们逐一说明：

- =name= 是结构名
- =opts= 是结构选项组成的表
- =slots= 是各 slot 组成的表，未初始化
- =defaults= 各 slot 的默认值，未初始化
- =conc-name= 是 getter 函数的前缀，这里初始化为 ={name}-=
- =constructor= 是构造函数的名字，这里初始化为 =make-{name}=
- =constrs= 是自定义构造函数的名字表，未初始化
- =copier= 是拷贝函数的名字，初始化为 =copy-{name}=
- =predicate= 是谓词函数的名字，初始化为 ={name}-p=
- =print-func= 是打印函数，未初始化
- =print-auto= 是自动打印，未初始化
- =safety= 是安全等级，默认为 3
- =include= 是父结构的名字，未初始化
- =tag= 是 =name= 对应的符号
- =tag-symbol= 将要作为存储 tag 的表变量，它是 =cl-struct-{name}-tags=
- =include-descs= 是父结构的 slot 表
- =include-name= 是父结构的符号名
- =type= 对应于 =:type= 参数
- =named= 对应于 =:named= 参数
- =cldefsym= 为 =cl-defsubst= 或 =cl-defun= ，取决于是否内联
- =defsym= 为 =cl-defsubst= 或 =defun= ，取决于是否内联
- =forms= 宏展开后求值的表达式，初始化为 nil
- =docstring= 文档字符串，若第一个 slot 是字符串，则使用之
- =pred-form= 存放谓词函数 body，未初始化
- =pred-check= 存放谓词函数前面的表达式，未初始化

若 =name= 不是合理的结构名（cl--struct-name-p 返回 nil）会直接引发 wrong-type-argument 错误，就像这样：

#+BEGIN_SRC emacs-lisp
(cl-defstruct integer a) =>
Debugger entered--Lisp error: (wrong-type-argument cl-struct-name-p integer name)
#+END_SRC

=cl--struct-name-p= 的判断标准是：类型为非关键字的 symbol，且不能和基础类型名字相同，基础名字可以参考常量 =cl--typeof-types=

在判断结构名是否合理后， =cl-defstruct= 会对 =descs= 进行处理，其中的非 list 项会被套一层 list，方便后面的统一处理。同时 descs 表头会加上 =(cl-tag-slot)= 元素，表示它之后的元素是 slot。举例来说，经处理后 =(cl-defstruct yy a (b 2))= 中的 descs 就是 =((cl-tag-slot) (a) (b 2))= 。

** 对结构选项的处理

#+BEGIN_SRC emacs-lisp
;; line 85 to 131
(while opts
  (let ((opt (if (consp (car opts)) (caar opts) (car opts)))
	(args (cdr-safe (pop opts))))
    (cond ((eq opt :conc-name)
	   (if args
	       (setq conc-name (if (car args)
				   (symbol-name (car args)) ""))))
	  ((eq opt :constructor)
	   (if (cdr args)
               (progn
                 ;; If this defines a constructor of the same name as
                 ;; the default one, don't define the default.
                 (if (eq (car args) constructor)
                     (setq constructor nil))
                 (push args constrs))
	     (if args (setq constructor (car args)))))
	  ((eq opt :copier)
	   (if args (setq copier (car args))))
	  ((eq opt :predicate)
	   (if args (setq predicate (car args))))
	  ((eq opt :include)
           ;; FIXME: Actually, we can include more than once as long as
           ;; we include EIEIO classes rather than cl-structs!
           (when include-name (error "Can't :include more than once"))
           (setq include-name (car args))
           (setq include-descs (mapcar (function
                                        (lambda (x)
                                          (if (consp x) x (list x))))
                                       (cdr args))))
	  ((eq opt :print-function)
	   (setq print-func (car args)))
	  ((eq opt :type)
	   (setq type (car args))
           (unless (memq type '(vector list))
             (error "Invalid :type specifier: %s" type)))
	  ((eq opt :named)
	   (setq named t))
	  ((eq opt :noinline)
	   (setq defsym 'defun) (setq cldefsym 'cl-defun))
	  ((eq opt :initial-offset)
	   (setq descs (nconc (make-list (car args) '(cl-skip-slot))
			      descs)))
	  (t
	   (error "Structure option %s unrecognized" opt)))))
(unless (or include-name type)
  (setq include-name cl--struct-default-parent))
(when include-name (setq include (cl--struct-get-class include-name)))
#+END_SRC

opts 就是结构定义中的各种 option 组成的表，在 while 循环的开头定义的 =opt= 变量是选项关键字， =args= 是跟着关键字的参数。

上面的代码大多比较简单，就是用 =args= 来指定某些变量的值。通过上面的代码我们可知，除了 =:include= 外，其他的关键字可以指定多次，不过总是以最后指定的为准。 =include-name= 和 =include-descs= 会被赋予对应的参数，例如 =(cl-defstruct (yy (:include yz b (a 1))))= 会使 =include-name= 的值为 'yz， =include-descs= 为 =((b) (a 1))=

对于 =:constructor= ，若指定的不仅仅是构造名字则需进行更多的处理，它会被压入 constrs 中，为之后创建构造函数提供信息；若它的名字和 constructor 相同，那么 constructor 会被设为 nil。

对于 =:type= ，若 =(car args)= 不为 vector 或 list 则引发错误。

对于 =:initial-offset n= ，它会在 descs 前面添加 n 个 =(cl-skip-slot)= 。

如果 =opts= 中不存在 =:include= 和 =:type= ，则使用 =cl--struct-defalut-parent= 作为 =include-name= 。

** 对 =:include= 的处理

#+BEGIN_SRC emacs-lisp
(if include
    (let* ((inc-type (cl--struct-class-type include))
           (old-descs (cl-struct-slot-info include)))
      (and type (not (eq inc-type type))
	   (error ":type disagrees with :include for %s" name))
      (while include-descs
	(setcar (memq (or (assq (caar include-descs) old-descs)
			  (error "No slot %s in included struct %s"
				 (caar include-descs) include))
		      old-descs)
		(pop include-descs)))
      (setq descs (append old-descs (delq (assq 'cl-tag-slot descs) descs))
	    type inc-type
	    named (if (memq type '(vector list))
                      (assq 'cl-tag-slot descs)
                    'true))
      (if (cl--struct-class-named include) (setq named t)))
  (unless type
    (setq named 'true)))
#+END_SRC

=inc-type= 和 =old-descs= 分别是父结构的序列类型和 slot 信息。若子结构与父结构的类型不同的话会引发错误。

** 上一节示例代码中存在的疑点

在文档中可以看到这样的描述：

#+BEGIN_QUOTE
In true Common Lisp, ‘typep’ is always able to recognize a
tructure object even if ‘:predicate’ was used.  In this
ackage, ‘cl-typep’ simply looks for a function called
TYPENAME-p’, so it will work for structure types only if they
sed the default predicate name.
#+END_QUOTE

但是在上面的这个例子中， =cl-typep= 是可以正常工作的：

#+BEGIN_SRC emacs-lisp
(cl-defstruct yy-9 a)
(cl-typep (make-yy-9 :a 1) 'yy-9) => t
(cl-defstruct (yy-11 (:predicate huhu)) a)
(cl-typep (make-yy-11 :a 1) 'yy-11) => t
(cl-typep (make-yy-9 :a 1) 'yy-11) => nil
#+END_SRC

至于 =cl-typep= 是否修改过以支持非默认名字的谓词，我们可以通过观察源代码或检索 commit 历史来了解。文档的更新速度是慢于代码更新速度的，我怀疑部分文档还停留在没有使用 record 作为内部表示的时候。

另外一个问题和 =:include= 有关，那就是子结构是否会继承父结构的类型。根据上面的 =:initial-offset= 的例子可见：

#+BEGIN_SRC emacs-lisp
(cl-defstruct (yy-31 (:initial-offset 1)) a b)
(cl-defstruct (yy-36 (:initial-offset 1) (:include yy-31) (:type vector) :named) c)
=> Debugger entered--Lisp error: (error ":type disagrees with :include for yy-36")
#+END_SRC

关于 =:include= 的另外一个问题是，父结构的 getter 函数是如何访问子结构的 slot 的？我对它的实现比较好奇。

最后一个问题， =cl-struct-sequence-type= 根据文档来说应该返回 record，list 或 vector，但是当接受类型为 record 的结构名时却返回 nil。这也需要阅读代码来找到原因。

下面的分析就“函数生成”， 谓词名字和 =cl-typep= 的关系，以及 =:include= 的实现细节三方面展开。

** 各函数的生成代码

=cl-defstruct= 在定义结构时，会默认生成构造函数，getter 函数，谓词函数，拷贝函数。我们可以看看它生成的函数的代码是什么样子的。

在开始前我对下面代码中出现的名字做一些说明

- =tag-symbol= ，结构名符号，它是 =cl-struct-{name}-tag= ，在随后的求值中它的值为 =(name)=

- =form= 就是展开得到的待求值表达式，在宏展开期间可以通过 push 向里面塞东西

- =copier= 是拷贝函数的名字符号


在这些函数中，最简单的就是拷贝函数，如果 =:copy= 没有指定为 nil 的话，它会使用以下代码来生成拷贝函数。实际上它就是为 =copy-sequence= 添加了一个别名而已：

#+BEGIN_SRC emacs-lisp
(and copier
         (push `(defalias ',copier #'copy-sequence)
               forms))
#+END_SRC

接下来就是谓词函数，它的构造分为两部，第一步是获得判断方法，第二步是组成函数体：

#+BEGIN_SRC emacs-lisp
(setq pred-form (and named
                     (let ((pos (- (length descs)
                                   (length (memq (assq 'cl-tag-slot descs)
                                                 descs)))))
                       (cond
                        ((null type) ;Record type.
                         `(memq (type-of cl-x) ,tag-symbol))
                        ((eq type 'vector)
                         `(and (vectorp cl-x)
                               (>= (length cl-x) ,(length descs))
                               (memq (aref cl-x ,pos) ,tag-symbol)))
                        ((= pos 0) `(memq (car-safe cl-x) ,tag-symbol))
                        (t `(and (consp cl-x)
                                 (memq (nth ,pos cl-x) ,tag-symbol))))))
      pred-check (and pred-form (> safety 0)
                      (if (and (eq (cl-caadr pred-form) 'vectorp)
                               (= safety 1))
                          (cons 'and (cl-cdddr pred-form))
                        `(,predicate cl-x))))
(when pred-form
  (push `(,defsym ,predicate (cl-x)
           (declare (side-effect-free error-free))
           ,(if (eq (car pred-form) 'and)
                (append pred-form '(t))
              `(and ,pred-form t)))
        forms)
  (push `(put ',name 'cl-deftype-satisfies ',predicate) forms))
#+END_SRC

第一部分的目的是根据选择的类型和辅助消息来构造合适的判断表达式，第二部分负责生成定义表达式。在第一部分中，对于 =record= 类型，它仅仅比较了类型名字，对于 =vector= 类型，它通过判断向量长度和向量中是否存在 tag 名来判断


* 由 struct 到 eieio 之前的准备



@@html:<div class="yyheadimg"><img src="./aHR0cHM6Ly93d3cucGl4aXYubmV0L2FydHdvcmtzLzEwNzcxMzE3.jpg" alt="load failed"></div><div class="yyimgcomment">letty whiterock</div>@@

@@html:<div class="yyheadimg"><img src="./aHR0cHM6Ly93d3cucGl4aXYubmV0L2FydHdvcmtzLzU4NjA0MTUw.jpg" alt="load failed"></div><div class="yyimgcomment">letty whiterock</div>@@
