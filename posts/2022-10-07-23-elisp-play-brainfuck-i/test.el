;; -*-lexical-binding:t; -*-

(require 'ert)
(require 'yybf1)

(defalias '☉ '☉-execute)

(ert-deftest yybf1-reset ()
  (should (= 1 (aref (☉ "[-]+") 0)))
  (should (= 1 (aref (☉ "+[-]+") 0)))
  (should (= 1 (aref (☉ "++[-]+") 0)))
  (should (= 1 (aref (☉ "+++[-]+") 0))))

(ert-deftest yybf1-mov ()
  (let (a)
    (setq a (☉ "+[->+<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)))
    (setq a (☉ "++[->+<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 2)))
    (setq a (☉ ">>++++[-<++++>]<[-<++++>]<[->+<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 64)))))

(ert-deftest yybf1-copy ()
  (let (a)
    (setq a (☉ "[->+>+<<]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "+[->+>+<<]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 1)
		 (= (aref a 2) 0)))
    (setq a (☉ "++++++++++++++++++++++++++++++++++++[->+>+<<]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 37)
		 (= (aref a 1) 36)
		 (= (aref a 2) 0)))))

(ert-deftest yybf1-not ()
  (let (a)
    (setq a (☉ "[>+<[-]]+>[-<->]<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)))
    (setq a (☉ "+[>+<[-]]+>[-<->]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)))
    (setq a (☉ "+++++[>+<[-]]+>[-<->]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)))))

(ert-deftest yybf1-when ()
  (let (a)
    (setq a (☉ "[>+<[-]]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)))
    (setq a (☉ "++[>+<[-]]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)))))

(ert-deftest yybf1-unless ()
  (let (a)
    (setq a (☉ "[>+<[-]]+>[-<->]<[->+<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)))
    (setq a (☉ "+[>+<[-]]+>[-<->]<[->+<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)))))

(ert-deftest yybf1-if ()
  (let (a)
    (setq a (☉ "+>+<[>>+<<[-]>-<]>[->>+<<]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 1)
		 (= (aref a 3) 0)))
    (setq a (☉ ">+<[>>+<<[-]>-<]>[->>+<<]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)
		 (= (aref a 3) 1)))))

(ert-deftest yybf1-and ()
  (let (a)
    (setq a (☉ "[[-]>>+<<]+>[[-]>+<]++>[-<->]<[[-]<->]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "+[[-]>>+<<]+>[[-]>+<]++>[-<->]<[[-]<->]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ ">++<[[-]>>+<<]+>[[-]>+<]++>[-<->]<[[-]<->]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "+++>++++<[[-]>>+<<]+>[[-]>+<]++>[-<->]<[[-]<->]<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))))

(ert-deftest yybf1-or ()
  (let (a)
    (setq a (☉ "[[-]>>+<<]>[[-]>+<]>[[-]<<+>>]<<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "+[[-]>>+<<]>[[-]>+<]>[[-]<<+>>]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ ">++<[[-]>>+<<]>[[-]>+<]>[[-]<<+>>]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "++>+++<[[-]>>+<<]>[[-]>+<]>[[-]<<+>>]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))))

(ert-deftest yybf1-xor ()
  (let (a)
    (setq a (☉ "[[-]>>+<<]>[[-]<+>]<[>>[-<<->>]<<[->>+<<]]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "+[[-]>>+<<]>[[-]<+>]<[>>[-<<->>]<<[->>+<<]]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ ">+++<[[-]>>+<<]>[[-]<+>]<[>>[-<<->>]<<[->>+<<]]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))
    (setq a (☉ "++>+<[[-]>>+<<]>[[-]<+>]<[>>[-<<->>]<<[->>+<<]]>>[-<<+>>]<<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)
		 (= (aref a 2) 0)))))

(ert-deftest yybf1-add ()
  (let (a)
    (setq a (☉ "++>[-<+>]<+"))
    (should (and (= (aref a 0) 3)
		 (= (aref a 1) 0)))
    (setq a (☉ "++>++<>[-<+>]<+"))
    (should (and (= (aref a 0) 5)
		 (= (aref a 1) 0)))
    (setq a (☉ "+>+[-<+>]<+"))
    (should (and (= (aref a 0) 3)
		 (= (aref a 1) 0)))))

(ert-deftest yybf1-sub ()
  (let (a)
    (setq a (☉ "++>[-<->]<+"))
    (should (and (= (aref a 0) 3)
		 (= (aref a 1) 0)))
    (setq a (☉ "++>++<>[-<->]<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 0)))
    (setq a (☉ "+++>+[-<->]<+"))
    (should (and (= (aref a 0) 3)
		 (= (aref a 1) 0)))))


(ert-deftest yybf1-mul ()
  (let (a)
    (setq a (☉ "+[->[->+>+<<]>[-<+>]<<]>[-]>>[-<<<+>>>]<<<+"))
    (should (and (= (aref a 0) 1)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (☉ "+>+<[->[->+>+<<]>[-<+>]<<]>[-]>>[-<<<+>>>]<<<+"))
    (should (and (= (aref a 0) 2)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (☉ "++>++<[->[->+>+<<]>[-<+>]<<]>[-]>>[-<<<+>>>]<<<+"))
    (should (and (= (aref a 0) 5)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (☉ "++++++>++++++++<[->[->+>+<<]>[-<+>]<<]>[-]>>[-<<<+>>>]<<<+"))
    (should (and (= (aref a 0) 49)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))))

(ert-deftest yybf1-div ()
  (let (a)
    (setq a (☉ "+>>>>++<<<<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (= (aref a 4) 1)
		 (= (aref a 5) 0)))
    (setq a (☉ "+++>>>>++<<<<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (= (aref a 4) 1)
		 (= (aref a 5) 1)))
    (setq a (☉ "++++++++++>>>>+++<<<<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (= (aref a 4) 2)
		 (= (aref a 5) 3)))
    (setq a (☉ ">>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-
>>>>>>++++[-<++++>]<[-<++++>]<<<<<
[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 55)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (= (aref a 4) 9)
		 (= (aref a 5) 28)))))

(ert-deftest yybf1-div-1 ()
  (let (a)
    (setq a (☉ "+>++<
>[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<<<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ "+++>++<
>[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ "++++++++++>+++<
>[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<<<+"))
    (should (and (= (aref a 0) 4)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ ">>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-
>>>++++[-<++++>]<[-<++++>]<<
>[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<<<+"))
    (should (and (= (aref a 0) 29)
		 (= (aref a 1) 55)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))))

(ert-deftest yybf1-div-2 ()
  (let (a)
    (setq a (☉ "+>++<
>[->+>+<<]>>[-<<+>>]<[[-]<[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<]<<+"))
    (should (and (= (aref a 0) 1)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ "+++>++<
>[->+>+<<]>>[-<<+>>]<[[-]<[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<]<<+"))
    (should (and (= (aref a 0) 2)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ "++++++++++>+++<
>[->+>+<<]>>[-<<+>>]<[[-]<[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<]<<+"))
    (should (and (= (aref a 0) 4)
		 (= (aref a 1) 1)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ ">>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-
>>>++++[-<++++>]<[-<++++>]<<
>[->+>+<<]>>[-<<+>>]<[[-]<[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<]<<+"))
    (should (and (= (aref a 0) 29)
		 (= (aref a 1) 55)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))
    (setq a (☉ ">>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-
>[->+>+<<]>>[-<<+>>]<[[-]<[>>>+<<<-]<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>>>>[-]>[<<<<<+>>>>>-]<<<]<<+"))
    (should (and (= (aref a 0) 1848)
		 (= (aref a 1) 0)
		 (zerop (aref a 2))
		 (zerop (aref a 3))
		 (zerop (aref a 4))
		 (zerop (aref a 5))))))

(ert-deftest yybf1-readint ()
  (let (a b)
    (setq b (lambda (x)
	      (☉ ">,[>++++++[-<-------->]+++++++++[-<<[->+>>+<<<]>>>[-<<<+>>>]<]<[-<+>],]<+" (☉-reader-gen x))))
    (setq a (funcall b "0"))
    (should (and (= (aref a 0) 1)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (funcall b "0000"))
    (should (and (= (aref a 0) 1)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (funcall b "1234"))
    (should (and (= (aref a 0) 1235)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (funcall b "114514"))
    (should (and (= (aref a 0) 114515)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))
    (setq a (funcall b "191981"))
    (should (and (= (aref a 0) 191982)
		 (zerop (aref a 1))
		 (zerop (aref a 2))
		 (zerop (aref a 3))))))

(ert-deftest yybf1-writeint ()
  (let (a b c)
    (setq b (lambda ()
	      (let ((ls nil))
		(lambda (c &optional get)
		  (if get
		      (cl-coerce (reverse ls) 'string)
		    (setq ls (cons c ls)))))))
    (setq c (lambda (numbf numstr)
	      (let ((ofn (funcall b)))
		(setq a  (☉ (concat numbf "[->+<]>[>>>>++++++++++<<<<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>+[-<+>]>>>[-]>[-<<<<+>>>>]<<<<]<[>++++++[<++++++++>-]<-.[-]<]+") nil ofn))
		(and (= (aref a 0) 1)
		     (= (cl-loop for i across a sum i) 1)
		     (string= numstr (funcall ofn ?a t))))))
    (should (funcall c "+" "1"))
    (should (funcall c "+++" "3"))
    (should (funcall c ">>++++[-<++++>]<[-<++++>]<" "64"))
    (should (funcall c ">>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-" "1847"))
    (should (funcall c "++>>>++++[-<++++>]<[-<++>]<-<
    [->[->+>+<<]>[-<+>]<<]>[-]>>[-<<<+>>>]<<<
    >>>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-<
    [->[->+>+<<]>[-<+>]<<]>[-]>>[-<<<+>>>]<<<" "114514"))))

(ert-deftest yybf1-writeint-1 ()
  (let (a b c)
    (setq b (lambda ()
	      (let ((ls nil))
		(lambda (c &optional get)
		  (if get
		      (cl-coerce (reverse ls) 'string)
		    (setq ls (cons c ls)))))))
    (setq c (lambda (numbf numstr)
	      (let ((ofn (funcall b)))
		(setq a  (☉ (concat numbf "[->+<]+>[<->[->+<]>[>>>>++++++++++<<<<[->+>>+>-[<-]<[->>+<<<<[->>>+<<<]>]<<]>+[-<+>]>>>[-]>[-<<<<+>>>>]<<<<]<[>++++++[<++++++++>-]<-.[-]<]]<[>++++++[<++++++++>-]<-.[-]]+") nil ofn))
		(and (= (aref a 0) 1)
		     (= (cl-loop for i across a sum i) 1)
		     (string= numstr (funcall ofn ?a t))))))
    (should (funcall c "+" "1"))
    (should (funcall c "+++" "3"))
    (should (funcall c ">>++++[-<++++>]<[-<++++>]<" "64"))
    (should (funcall c ">>>+++++++++++[-<++++++++>]<[-<+++++++>]<[-<+++>]<-" "1847"))
    (should (funcall c "" "0"))))
