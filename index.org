#+TITLE: Home :: include-yy
#+DATE: [2024-04-21 Sun 21:08]
#+MACRO: po_n (eval (yynt/yy-post-list "./posts" 10))
#+MACRO: re_n (eval (yynt/yy-repost-list "./republish" 5))

[[./assets/img/dejiko.webp]]

* 最近的 [[./posts/index.org][Posts]]

{{{po_n}}}

* 最近的 [[file:republish/index.org][Republish]]

{{{re_n}}}

* 其他页面

#+attr__: [index]
- [[./posts/tags.org][博客的分类页面]]
- [[./projecteuler/index.org][ProjectEuler 题解]]
- 可能有用的文章
  - [[file:posts/2021-10-04-13-emacs-list-functions/index.org][emacs 的 list 函数]]
  - [[file:republish/2024-06-21-diataxis-documentation/index.org][Diátaxis documentation framework]]

* TARGETS

草，整理目标并不比写正经的博客简单。

** BLOGGING

*Emacs*

- 在 [[https://lists.gnu.org/archive/html/emacs-devel/2025-08/msg00405.html][igc: GC responsiveness]] 讨论中，Helmut Eller 使用滚动屏幕测试 GC 性能
  - [ ] 总结 2025 年 8 月的所有讨论邮件，观察 IGC 相比 Emacs GC 的不同之处
- 为 Windows 平台上的 Emacs 添加 ='alpha-background= 支持，即「背景透明」而非整个窗口的透明。具体讨论可以参考 emacs-devel 上的 [[https://lists.gnu.org/archive/html/emacs-devel/2025-07/msg00174.html][The frame parameter 'alpha-background semms not work on MS-Windows]]。这一目标主要可以分解为以下两个子目标：
  - [ ] 学习和总结如何在 Windows 上为基本窗口实现透明和背景透明效果
  - [ ] 完成 ='alpha-background= 相关补丁，提交到 Emacs 主线并总结过程

- 参考 Org-mode 的 ox-html.el，完成对 [[https://github.com/include-yy/ox-w3ctr][ox-w3ctr]] 的重构，即代码整理以及编写对应文档。在开始 special-block 的重构之前，应首先完成如下两部分的学习和博客记录：
  - [X] 学习如何编写良好且可维护的 docstring，即文档字符串
  - [ ] 学习如何使用 ERT 编写良好且可维护的单元测试，或称回归测试

- 完成「Emacs 的 treesit」的第二，第三部分：
  - [ ] 第二部分应使用 MoonBit 这一语言的 tree-sitter parser 来介绍 Emacs treesit 的 API 使用，在现在 [2025-08-17]，Emacs 的 treesit 已基本稳定
  - [ ] 第三部分介绍如何使用 treesit 编写基本的 major-mode，并考虑介绍传统的实现方法来作为 fallback

- 完成对 Emacs Lisp Manual 核心部分的学习与总结，即大致记录到 Emacs Lisp Manual 的前二十章（大概是到 Reading and Printing Lisp Object，可以扩展到 Documentation），目前尚未完成的章节包括：
  #+attr__: [index]
  - [ ] 4 Strings and Characters
  - [ ] 6 Sequences, Arrays, and Vectors
  - [ ] 11 Control Structures 
  - [ ] 12 Variables
  - [ ] 13 Functions
  - [ ] 17 Byte Compilation, [[https://rocky.github.io/elisp-bytecode.pdf][GNU Emacs Lisp Bytecode Reference Manual]]
  - [ ] 18 Compilation of Lisp to Native Code

- 已存在的草稿
  #+attr__: [index]
  - [ ] 「Emacs 的模式匹配 —— pcase 与 cond*」，介绍 Emacs 中模式匹配的用法和实现
  - [ ] 「Emacs 中的 Error Handling」，介绍如何在 Emacs 中做错误处理
  - [ ] 「如何编译 Emacs」，介绍如何在不同操作系统上使用工具链获取完全功能的 Emacs
  - [ ] 「Emacs 的 oclosure」，介绍如何使用 =oclosure= 来创建可手动捕获的「开闭包」
  - [ ] 「Emacs 与 OOP」，介绍 Emacs 中的 OOP 设施与它的 OOP 历史  
  - [ ] 邮件列表整理 --- 加速 Emacs 包查找
  - [ ] Emacs 与 Windows 上的 ConPTY
  - [ ] 介绍如何使用 Emacs 29 内置的 =sqlite3= 支持
  - [ ] 介绍 Emacs 30 内置的简单补全前端 =completion-preview=

---------------------

*FP*

- 25 年 8 我完成了 [[file:posts/2025-08-08-tr-the-expression-problem/index.org][「翻译」The Expression Problem and its solutions]]，作者还有一篇
  - [ ] [[https://eli.thegreenplace.net/2018/more-thoughts-on-the-expression-problem-in-haskell/][More thoughts on the Expression Problem in Haskell]]

- 25 年年初我写了 [[file:posts/2025-01-19-monad-mother-cps/index.org][CPS and Cont Monad --- The Mother of all Monads]]，可以看作对 Monad 的入门理解。但这实际上是一篇未完成的博客，它至少还需要包括对以下内容的介绍：
  #+attr__: [index]
  - [ ] 简单 Monad，包括 =Maybe=, =Either=, =List=, =State=, =Reader=, =Writer=, =IO=, =Free=
  - [ ] 介绍 Monad Transformer
  - [ ] 对 delimited continuation 的进一步介绍
  - [ ] 介绍 effect 与 Koka
  ​
  delimited continuation 可以参考以下链接
  - [[https://www.khoury.northeastern.edu/home/amal/course/7480-s12/delim-control-notes.pdf][Types for Delimited Control Operators]]
  - [[https://legacy.cs.indiana.edu/~dyb/pubs/LaSC-7-1-pp83-110.pdf][Subcontinuations*]]
  - [[https://stackoverflow.com/questions/46379461/understanding-sub-partial-full-one-shot-continuations-in-procedural-languages][Understanding (sub,partial,full,one-shot) continuations (in procedural languages)]]
  - [[https://dev.to/yelouafi/algebraic-effects-in-javascript-part-1---continuations-and-control-transfer-3g88][Algebraic Effects in JavaScript part 1 - continuations and control transfer]]
  - [[https://www.deinprogramm.de/sperber/papers/shift-reset-direct.pdf][Final Shift for Call/cc: Direct Implementation of Shift and Reset]]

- 25 年年初我写了 [[file:posts/2025-02-24-aitac-1/index.org][「笔记」An Invitation to Applied Category Theory — Chapter 1]]，这本书是范畴论的入门级教程，目前还剩 2 到 7 章没有读和记笔记
  - [ ] 「笔记」An Invitation to Applied Category Theory — Chapter *2*

- 24 年 7 月我完成了[[file:posts/2024-07-24-tr-plai3-evaluation/index.org][「翻译」Programming Languages: Application and Interpretation [Evaluation]​]]，后续内容尚待翻译
  - [ ] 完成 /Syntactic Sugar/ 一章的翻译

*Others*

- [ ] 完成 Sakura, Moyu. -as the Night's, Reincarnation 的感想


** LEARNING

*LISP 系列*

- 对于 Racket，我希望我能够使用它建立起一种标准编程语言模型，来让学习其他编程语言更加容易。

- 我希望有时间能读完以下书籍：
  - [ ] /Structure and Interpretation of Computer Programs/​，即《计算机程序的构造与解释》
  - [ ] /Essentials of Programming Language/
  - [ ] /Beautiful Racket/ -- an introduction to language-oriented programming using Racket
  - [ ] /Let Over Lambda/: 50 Years of Lisp
  - [ ] /The Art of the Metaobject Protocol/

*JavaScript 与前端技术*

- 读完两本分别介绍 JavaScript 和 TypeScript 的书：
  - [ ] 完成一本 JavaScript 教程
  - [ ] 完成一本 TypeScript 教程

- 我对 WASM 很感兴趣，这可能是因为 WASM 的 WAT 格式使用了 S-EXP，而且 WASM 有完成 JVM 当年没有完成的使命的可能性，即成为多语言的跨平台虚拟机（当然现在 JS 差不多已经是了）。对于 WASM，我可能会完成以下这几件事：
  - [ ] 读一遍 WASM 标准
  - [ ] 学会在浏览器中使用 WASM 模块
  - [ ] 使用 WASM 实现 Scheme （可参考 [[https://github.com/PollRobots/scheme][PollRobots/scheme]] 和 [[https://github.com/google/schism][schism]] 和 [[https://spritely.institute/hoot/][hoot]]）

- 最后是 WebGPU，我对计算机图形学有一定的兴趣，可能可以做这些事情：

  - [ ] 读完 WGSL 和 WebGPU 的标准文档
  - [ ] 为 WGSL 写一个 Emacs treesit 或普通 syntax-table 高亮
  - [ ] 使用 WebGPU 或 DirectX12 完成 GAMES101

*其他编程语言*

#+attr__: [index]
- [ ] Haskell
- [ ] Scala3
- [ ] Koka
- [ ] Rust
- [ ] Zig
- [ ] Moonbit
- [ ] Swift

*范畴论*

- [ ] 范畴论入门书 [[https://arxiv.org/abs/1803.05316][Seven Sketches in Compositionality: An Invitation to Applied Category Theory]]

*OOP*

「面向对象是如此的成功，以至于我们可能忘记了它本来的目的。」 --- 沃·兹基硕得

当前广为流传的、以类（class）、继承（inheritance）和多态（polymorphism）为中心的面向对象编程（Object-Oriented Programming, OOP）范式，与其最初的、更为激进的目标发生了显著且影响深远的偏离。

我计划对 OOP 展开一些「研究」。


** LONG-TERM

#+attr__: [index]
- [ ] 学会可持续性地整理资料
- [ ] 学点日语

** FUN

*ギャルゲー*

#+attr__: [index]
- [ ] 灵感满溢的甜蜜创想
  - 常轨脱离 Creative
  - ハミダシクリエイティブ
- [ ] 交响乐之雨
  - シンフォニック＝レイン
- [ ] 苍之彼方四重奏
  - 蒼の彼方のフォーリズム
- [ ] 突然之间发现我已恋上你
  - いきなりあなたに恋している
- [ ] 不败世界与终焉之花
  - 永不枯萎的世界与终结之花
  - 枯れない世界と終わる花
- [ ] 鬼的捉迷藏
  - 鬼ごっこ！
- [ ] rewrite
- [ ] Yumeutsutsu Re:Master
- [ ] 爱上火车
  - まいてつ
- [ ] 近月少女的礼仪
  - 月に寄りそう乙女の作法
- [ ] eden*
- [ ] Summer Pockets
- [ ] 秽翼的尤斯蒂娅
  - 穢翼のユースティア
- [ ] よめがみ My Sweet Goddess!
- [ ] 琉璃交错~妹物语~
  - ルリのかさね～いもうと物語り

*アニメ*

#+attr__: [index]
- [ ] 变态王子与不笑猫
- [ ] 我心中危险的东西
- [ ] 实况主的逃脱游戏
- [ ] 魔界天使加百列
- [ ] 爱丽丝和特雷斯的梦幻工厂
- [ ] 战 x 恋
- [ ] 公主闯天关
- [ ] 现世研二代目
- [ ] 七人魔法使
- [ ] [[https://myself-bbs.com/thread-47670-1-1.html][桃子男孩渡海而来]]
- [ ] 恋爱要在世界征服后
- [ ] [[https://myself-bbs.com/thread-44208-1-1.html][紅 Kure-nai【全 12 集】]]
- [ ] 漫画家与助手们
- [ ] 超元气三胞胎
- [ ] 未确定进行式
- [ ] 今日の5の2

* FOLKS

#+attr__: [index]
- [[https://www.cnblogs.com/orion-orion/][猎户座]]
  - [[https://www.cnblogs.com/orion-orion/p/17419322.html][SICP：惰性求值、流和尾递归（Python实现）]]
  - [[https://www.cnblogs.com/orion-orion/p/17402973.html][SICP：元循环求值器（Python实现）]]
- [[https://dongdigua.github.io/][董地瓜]]
  - [[https://dongdigua.github.io/posts][posts]]
  - [[https://dongdigua.github.io/internet_collections][internet collections]]
- [[https://emacstalk.codeberg.page/podcast/][emacs talk]]
- *[[https://manateelazycat.github.io/index.html][⛤lazycat⛤]]*
  - [[https://manateelazycat.github.io/2016/03/16/auto-save/][Emacs, 我已经十年没有按过保存按键了]]
  - [[https://manateelazycat.github.io/2023/06/27/about-language/][创造性思维和严格型编程语言]]
- [[https://yueyao1982.com/reconstr_phil/][哲学的重建]]
- *[[https://github.com/azu][azu]]*
  - [[https://jser.info/][JavaScriptの最新情報を紹介する週刊ブログ]]
  - [[https://efcl.info/][ブラウザ/JavaScript等についてのブログ]]
  - [[https://azu.github.io/promises-book/][JavaScript Promiseの本]]（[[http://liubin.org/promises-book/][JavaScript Promise迷你书]]）
- [[https://rakhim.org/][Computable Multiverse]]
  - [[https://rakhim.org/honestly-undefined/][#19: Blogging vs. blog setups]]
  - [[https://rakhim.org/user-is-dead/][User is dead]]
  - [[https://rakhim.org/coding-vs-dot-programming-vs-dot-software-engineering/][Coding vs. Programming vs. Software Engineering]]
  - [[https://rakhim.org/process-of-learning/][Process of Learning]]
  - [[https://rakhim.org/the-price-of-complexity/][The price of complexity]]
- [[https://xiaohanyu.me/archive/][Hanyu -- 行者无疆 始于足下]]
- [[https://gaoyichao.com/Xiaotu/][无处不在的小土]]
  - [[https://gaoyichao.com/Xiaotu/?book=ros&title=index][机器人操作系统]]
  - [[https://gaoyichao.com/Xiaotu/?book=ORB_SLAM%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB&title=index][ORB-SLAM源码解读]]
- [[https://alpha-beta-eta.github.io/][alpha-beta-eta]]
  - [[https://alpha-beta-eta.github.io/notes/pl.pdf][编程语言的邀请]]
- [[https://karthinks.com/][Karthinks]]
  - [[https://karthinks.com/software/avy-can-do-anything/][Avy Can Do Anything]]
- [[https://karl-voit.at/][public voi -- karl-voit]]
  - [[https://karl-voit.at/tags/pim/][Tag Page for the Tag "pim"]]
  - [[https://karl-voit.at/tags/emacs/][Tag Page for the Tag "emacs"]]
  - [[https://karl-voit.at/2019/09/25/using-orgmode/][Blog Series: Using Org Mode Features(UOMF)]]
- *[[https://sachachua.com/blog/][Living an Awesome Life -- Sacha Chua]]*
- [[https://matklad.github.io/][matklad]]
  - [[https://matklad.github.io/2022/04/25/why-lsp.html][Why LSP?]]
  - [[https://matklad.github.io/2023/10/12/lsp-could-have-been-better.html][LSP could have been better]]
- [[https://blog.wangxuan.name/][王玄的博客 --- 种野菜杂草的自留地，任君取用]]
- [[https://luoshui.icu/blog/][Blogs --- 此地有野狗出没]]
  - [[https://luoshui.icu/blog/6619a405/][电子玩具 | 我为什么选择 Excel]]
- [[https://tratt.net/laurie/blog/archive.html][Laurence Tratt: Laurence Tratt]]
  - [[https://tratt.net/laurie/blog/2020/which_parsing_approach.html][Which Parsing Approach?]]
- [[https://docs.divio.com/documentation-system][Documentation System]]
- [[https://www.cnblogs.com/Ninputer][Ninputer | 装配脑袋]]
  - [[https://www.cnblogs.com/Ninputer/archive/2007/11/26/972968.html][用Lambda表达式进行函数式编程（续）：用C#实现Y组合子]]
- [[https://css.clsty.link][CLSTY 的网络空间站]]
  - [[https://css.clsty.link/p/feda224a0/website-link-management-prevent-404/][浅谈网站 URL 管理与预防 404]]
- [[https://innei.in/][静かな森 - 致虚极，守静笃。]]
  - [[https://innei.in/posts/programming/write-a-nodejs-library-in-2022][在 2022 年，写一个库有多难]]
- [[https://amodernist.com/index.html][Webpresence of Philip Kaludercic]]
  - [[https://amodernist.com/texts/medi-macro.html][Meditations on a (Lisp-2) Macro]]
- [[https://blog.xinshijiededa.men/][新世界的大门]]
  - [[https://blog.xinshijiededa.men/unicode/][2023 年每个软件开发者都必须知道的关于 Unicode 的基本知识]]
- [[https://blog.mattbierner.com/][UWTB]]
  - [[https://blog.mattbierner.com/the-delimited-continuation-monad-in-javascript/][The Delimited Continuation Monad in Javascript]]
- [[https://leastfixedpoint.com/tonyg/][Tony Garnock-Jones]]
  - [[https://eighty-twenty.org/2015/01/25/monads-in-dynamically-typed-languages][Monads in Dynamically-Typed Languages]]
- [[https://blog.hentioe.dev/][绅士喵 --- 做自己感兴趣的事]]
  - [[https://blog.hentioe.dev/posts/windows-chrome-128-noto-cjk-fonts.html][恭喜 Chrome 128 在 Windows 上默认使用 Noto 系列的 CJK 字体]]
- [[https://blog.mecheye.net/][Clean Rinse --- Shampoo for your System]]
  - [[https://blog.mecheye.net/2019/05/why-is-2d-graphics-is-harder-than-3d-graphics/][Why are 2D vector graphics so much harder than 3D?]]

* ABOUT

本博客以 emacs 相关内容为主，也有一些我比较感兴趣的东西。博文皆以 [[https://creativecommons.org/licenses/by-sa/4.0/][CC BY-SA 4.0]]  发布。如果你发现了文中的问题，可以通过 [[https://github.com/include-yy/notes/issues][issue]] 告诉我，或是 yy@egh0bww1.com。

你可以添加 [[file:rss.xml][RSS]] 以订阅此博客，链接为：https://egh0bww1.com/rss.xml 。如果你也有 emacs 相关的博客，或者是非常有趣的东西，我很高兴把你的链接放在 FOLKS 里。

*如果您发现某些内容侵犯了著作权，请通过邮件告诉我，我会及时删除。*

This blog primarily focuses on emacs-related content, with some other topics
that I find interesting. All blog posts are published under CC-BY-SA 4.0. If you
come across any issues in the articles, you can inform me through an [[https://github.com/include-yy/notes/issues][issue]] or by
emailing yy@egh0bww1.com.

You can add the RSS feed to subscribe to this blog. The link is
https://egh0bww1.com/rss.xml. If you also have an emacs-related blog or
something interesting, I would be happy to include your link in the FOLKS page.

*If you find any content that infringes upon copyright, please inform me via
email, and I will promptly remove it.*

*include-yy [2024-04-21 Sun 21:04]*
