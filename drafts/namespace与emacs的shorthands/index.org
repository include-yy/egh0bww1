#+SETUPFILE: ../../setup.org
#+TITLE: namespace 与 emacs 的 shorthands
#+TITLE: @@html:<div class="yyheadimg"><img src="./aHR0cHM6Ly9zZWlnYS5uaWNvdmlkZW8uanAvc2VpZ2EvaW0xNDE4MTg5.png" alt="load failed"></div>@@
#+DATE: [2022-04-26 Tue 15:54]
#+TAGS: emacs

2022 年 4 月 3 日，emacs 的维护者们推出了它的第 28 个版本，即 emacs 28。除了 =native-comp= 这个巨大的变化外，在 emacs 28 中还有许多非常小的改进，就比如将要在本文中介绍的 shorthands.el，它为 elisp 提供了某种意义上的名字空间支持。本文主要就两个问题展开讨论，其一是名字空间的作用以及它的必要性，其二是如何在 emacs 28（及以上）中使用 shorthands.el 所提供的功能。

我主要是受到了 emacs-china 上的这两个帖子的启发，才有了写下这篇文章的想法：

- https://emacs-china.org/t/elisp-shorthands-emacs28/18481

- https://emacs-china.org/t/elisp/20573


本文可能会不可避免地发散到模块化和包管理，包管理器相关的一些内容，凡是没有涉及到代码或引用的内容可能因为受限于当前我的知识水平和实践水平而与你的认识不一致。就不同的认识欢迎与我交流。

* 日常生活中的模块化例子

这里的“模块化”是个动词（modularize），“模块化的”对应的是（modular）。

名字空间的作用就是为了更好地模块化，所以我们先说下什么是模块化。对“模块化”这个词的理解可以是非常多样的，它也不仅仅用在编程中（不然就太狭隘了）。我对于模块化的理解就是把一些东西打包，以便在之后需要的时候 *直接* 拿出来用。拿日常生活来说的话，把所有垃圾放到垃圾袋里面再丢掉算是对垃圾最简单的模块化（也就是打包），把零钱、身份证、银行卡等等东西放到钱包里面就完成了“存放贴身物品”的模块化，需要用的时候，只需要在钱包里面找就行了。使用钱包的好处就是方便了各种物品的收纳，只要带着钱包就感觉带上了所有需要的东西，但是钱包一丢也等于这些东西都丢掉了（笑），不过从另一角度来说，这也让我们更加提防小偷以及裤子口袋的破洞。钱包可以看作是由通用口袋模块化得到的模块。

除了钱包之外，还有像是医疗箱、书柜之类的东西可作为功能模块化的例子。对我们来说最熟悉的模块化例子可能还是手机，手机的功能基本上算是攘括了生活中所有活动，什么水电费缴纳，手电筒照明功能，拍摄功能，指南针功能，地图功能，支付功能，通信功能，存储功能，等等，几乎无所不包。手机应该算是我们手里最通用和最基础的现代生活模块了。手机一般在单项上做的可能不如专门工具那么好，比如摄像功能，但使用手机拍点简单照片比使用专业的相机显然更加方便。说了这么多的废话，我想要表达的意思就是： *模块化是将一个或一系列功能集成为一个模块来更好的（也许并不）解决问题的方法。*

没有对功能进行模块化的时候，我们直接使用工具来解决问题，但是模块化后，我们直接使用的是模块而不是工具。如果问题很简单或者规模很小，模块化也不一定能让我们体会到好处。如果不使用钱包，我们拿零钱是直接从兜里掏，使用了钱包之后需要多出个从兜里拿出钱包的动作。如果手里只有几个硬币，显然直接拿着更方便。为了应对现在无处不在的测核酸需求，我随时都揣着身份证，但是我没有放到钱包里面，因为太麻烦了。但是一旦钱多起来或者卡片多起来，使用口袋就不是个比较好的选择了，钱包相比提供了专门管理钱币和卡片的分隔槽，从某种意义上来说， *它为我们承担了生活中的一部分复杂度* ，即管理钱币和卡片有序摆放的复杂度。我仍然需要将纸币和卡片整齐地或按一定顺序地放入钱包中，这也是要花时间的，但是钱包相比口袋的好处在于它能帮我维持这个整齐度和顺序，这样之后使用的时候就不用整理纸币或到处找卡了。我将“维持有序”的任务交给了钱包，付出的代价是不得不带着钱包，并时不时的整理钱包内容物，但是我获得了更短的查找时间，以及更有序的存储。

对于作为当代大学生的我来说，我并没有能力制作出可靠的钱包（用纸做倒是没问题），但是我可以用钱买到，不知这算不算我将我自己所面对的事情转嫁给了他人。再说下去可以感觉可以扯到社会分工，哈哈。
