#+SETUPFILE: ../../setup.org
#+FILETAGS: emacs

#+TITLE: emacs 中的错误处理
#+DATE: [2023-05-08 Mon 23:28]

#+BEGIN_COMMENT
#+ATTR_HTML: :class top-down-img
[[https://www.pixiv.net/artworks/91777995][file:0.png]]
#+END_COMMENT

所谓错误处理，简单来说就是代码不能正常执行时需要做的工作。很长一段时间我对错误处理的理解都停留在如下两条上：

- 对于没法处理的错误，直接结束程序
  #+BEGIN_SRC c
    // https://stackoverflow.com/questions/26831981/should-i-check-if-malloc-was-successful
    static inline void *MallocOrDie(size_t MemSize)
    {
	void *AllocMem = malloc(MemSize);
	if(!AllocMem && MemSize)
	{
	    printf("Could not allocate memory!\n");
	    about();
	}
	return AllocMem;
    }
  #+END_SRC

- 对于可能被调用者处理的错误，使用返回值标识是否执行成功
  #+BEGIN_SRC c
    bool mydiv (int *res, int a, int b)
    {
	if (b == 0) {
	    return false;
	}

	,*res = a / b;
	return true;
    }
  #+END_SRC

在有写这篇文章的想法时我对异常这种机制是非常陌生的：我没有认真学习和使用过任何一种语言中的异常，而这离我开始编程已经过了差不多五年了（笑），这可能是因为我对编程实践从来没有复杂到需要使用异常的地步。虽然我不怎么懂错误和异常处理，但是有人懂就行，我们可以直接学习他人的最佳实践来快速入门。在了解过一些编程语言和进行过一些编程实践后，我觉得我可以就错误处理这个话题展开一些简单的讨论了。

本文属于 elisp manual 补完计划的一部分，目的是介绍在 emacs 中如何进行错误处理，不过主要内容还是在介绍一般意义上的错误处理，不过碰巧是使用 elisp 来详细展开罢了，本文的内容如下：

- 异常和错误的关系
- 为什么我们需要异常
- 在 emacs 中使用异常
- 可恢复异常

本文使用的环境为 emacs 28.2 x86_64 on Windows 10。

* 什么是错误

要想知道如何进行错误处理，首先我们需要知道什么是错误：

#+BEGIN_QUOTE
A software bug is an error, flaw or fault in the *design, development, or operation
of computer software* that causes it to produce an incorrect or *unexpected* result,
or to behave in *unintended* ways.

Bugs in software can arise from mistakes and errors made in interpreting and extracting
 users' *requirements*, planning a program's *design*, *writing* its source code, and from
*interaction* with *humans, hardware and programs*, such as operating systems or libraries.

[[https://en.wikipedia.org/wiki/Software_bug][Software bug -- Wikipedia]]
#+END_QUOTE

我在很早的一篇[[https://egh0bww1.com/posts/2021-07-04-8-bug-debugging-and-debugger-and-also-edebug][文章]]中对 bug 和错误（error）做了区分，我认为 bug 指出错这个事件，错误指出现 bug 的原因。可惜现在看来这种认识是有问题的，

- 开发。软件开发过程中产生的错误，是软件本身的问题。可能来自模糊的需求分析，水平低下的软件设计，混乱的开发合作，紧张的开发时间等等
- 环境。由外界因素导致，比如断网断电，不可抗自然灾害，人为损坏，机器老化，操作系统崩溃，等等
- 使用。即使软件开发完美地符合了目标，如果以错误或超出软件预期的方式使用，那么软件可能不能正常工作

#+BEGIN_QUOTE
我今天要教大家一个魔法，会了这个魔法，念一句咒语，任何代码都没有 bug

想知道咒语是什么吗？现在就告诉你。

跟我念：“这段代码没有任何期望行为。”

[[https://www.zhihu.com/question/38378942/answer/84744046][Bug 为什么不能彻底消除？ -- 圆角骑士魔理沙的回答]]
#+END_QUOTE

想要不创造 bug，最简单的就是不写代码，就像这个项目一样：[[https://github.com/kelseyhightower/nocode][nocode: the best way to write secure and reliable applications]]。或者是我们对程序的行为报以极大的宽容，即使程序崩溃或导致电脑死机我们都认为这是正常行为，当然对于现实中的编程活动这是不可能的。根据[[https://zh.wikipedia.org/wiki/%E6%91%A9%E8%8F%B2%E5%AE%9A%E7%90%86][墨菲定律]]，如果一件事可能出错那就一定会出错。既然我们为软件规定了唯一的目标，那么就存在无数的其他“目标”等着我们去“尝试”。

那么，程序中的错误会来自哪里呢？既然整个软件开发是人类活动的过程，那它就可能来自软件开发的任一阶段，比如不合适的需求分析，差劲的软件设计，程序员的拼写或逻辑错误，等等。另一些错误可能超出了软件的预期，比如机器老化或断电，与软件不匹配的操作系统环境，未预料的用户输入，不可修复的物理破坏，等等。

软件可能遇到的错误是无法穷尽的（做好一件事并不容易），我们能做的也仅仅是处理好我们能处理的。

#+BEGIN_QUOTE
「亚当坠落，才能有世人；成了世人，才能有快乐。」（[[https://www.churchofjesuschrist.org/study/scriptures/bofm/2-ne/2?lang=zhs&id=22-25#p22][尼腓二书2：22-25]]）
#+END_QUOTE


* 各种语言中的错误和异常

虽然有些好笑，不过还是让我们从词语的角度来认识一下“错误”和“异常”：

#+BEGIN_QUOTE
【错误】：
1. 形容词。不正确；与客观实际不符合
2. 名词。不正确的事物、行为等

【异常】：
1. 形容词。不同于寻常
2. 副词。非常；特别

「现代汉语词典 第七版」
#+END_QUOTE

在字典中“异常”没有名词形式，不过就形容词的意思来看这两个词都表达了某种不正确或不合适，比较负面。而且相比于“异常”错误的程度要更重一些。考虑到 exception 已经被翻译成了异常，下面出现的“错误”和“异常”都是名词。

以 =error and exception= 为关键字搜索得到的结果有很多都是 Java 相关的，这也许说明在错误与异常这个概念市场上 Java 有很大的占比，我们不妨首先从 Java 来了解它们的关联：

** Java 中的异常和错误

#+CAPTION: https://www.javatpoint.com/exception-vs-error-in-java
[[./1.png]]

可见 =Error= 和 =Exception= 都是继承于 =Throwable= 类的子类。那么 =Throwable= 是个什么东西？官方文档的描述如下：

#+BEGIN_QUOTE
=Throwable= 类是 Java 语言中所有错误和异常的超类。只有作为此类（或其一个子类）的实例的对象可由 Java 虚拟机抛出，或者可以由 Java =throw= 语句抛出。类似地，只有这个类或其子类可以是 =catch= 子句中的参数类型。通常使用两个子类 =Error= 和 =Exception= 的实例来表示出现异常情况。

通常，这些实例是在特殊情况的上下文中新创建的，以便包括相关信息（如堆栈跟踪数据）。

[[https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html][Class Throwable]]
#+END_QUOTE

#+BEGIN_SRC java
  class HelloWorld {
      public static void main(String[] args) {
	  try {
	      testThrow();
	  }
	  catch (Throwable e) {
	      System.out.println(e);
	  }
      }
      static void testThrow() throws Throwable {
	  throw new Throwable("hello World");
      }
  }

  // result
  // java.lang.Throwable: hello World
#+END_SRC


* 后记

#+BEGIN_COMMENT
| [[https://www.pixiv.net/artworks/59332061][file:-4.jpg]] | [[https://www.pixiv.net/artworks/97724715][file:-2.jpg]]  | [[https://www.pixiv.net/artworks/107754268][file:-3.jpg]]  |
| [[https://www.pixiv.net/artworks/23839947][file:-1.jpg]] | [[https://www.pixiv.net/artworks/50052145][file:-12.jpg]] | [[https://www.pixiv.net/artworks/105256151][file:-6.jpg]]  |
| [[https://www.pixiv.net/artworks/53230026][file:-7.jpg]] | [[https://www.pixiv.net/artworks/31435475][file:-8.jpg]]  | [[https://www.pixiv.net/artworks/39419396][file:-5.jpg]]  |
| [[https://www.pixiv.net/artworks/81199241][file:-9.jpg]] | [[https://www.pixiv.net/artworks/82664147][file:-10.jpg]] | [[https://www.pixiv.net/artworks/91412459][file:-11.jpg]] |
#+END_COMMENT
